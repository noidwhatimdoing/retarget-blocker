{
  "version": 3,
  "sources": ["../../../app/routes/app.analytics.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/app.analytics.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/app.analytics.tsx\");\n  import.meta.hot.lastModified = \"1749679646946.768\";\n}\n// REMIX HMR END\n\nimport { json } from \"@remix-run/node\";\nimport { useLoaderData } from \"@remix-run/react\";\nimport { useState } from \"react\";\nexport async function loader({\n  request\n}) {\n  // Remove authentication temporarily - generate sample data\n  const generateChartData = type => {\n    const now = new Date();\n    const data = [];\n    if (type === \"weekly\") {\n      // Last 7 days\n      for (let i = 6; i >= 0; i--) {\n        const date = new Date(now);\n        date.setDate(date.getDate() - i);\n        const users = Math.floor(Math.random() * 50) + 10;\n        data.push({\n          period: date.toLocaleDateString('en-US', {\n            weekday: 'short'\n          }),\n          users,\n          savings: users * 4\n        });\n      }\n    } else if (type === \"monthly\") {\n      // Last 6 months\n      for (let i = 5; i >= 0; i--) {\n        const date = new Date(now);\n        date.setMonth(date.getMonth() - i);\n        const users = Math.floor(Math.random() * 1000) + 200;\n        data.push({\n          period: date.toLocaleDateString('en-US', {\n            month: 'short'\n          }),\n          users,\n          savings: users * 4\n        });\n      }\n    } else {\n      // Last 3 years\n      for (let i = 2; i >= 0; i--) {\n        const date = new Date(now);\n        date.setFullYear(date.getFullYear() - i);\n        const users = Math.floor(Math.random() * 10000) + 2000;\n        data.push({\n          period: date.getFullYear().toString(),\n          users,\n          savings: users * 4\n        });\n      }\n    }\n    return data;\n  };\n  const weeklyData = generateChartData(\"weekly\");\n  const monthlyData = generateChartData(\"monthly\");\n  const yearlyData = generateChartData(\"yearly\");\n  return json({\n    weeklyData,\n    monthlyData,\n    yearlyData\n  });\n}\nexport default function Analytics() {\n  _s();\n  const {\n    weeklyData,\n    monthlyData,\n    yearlyData\n  } = useLoaderData();\n  const [usersTimeframe, setUsersTimeframe] = useState(\"weekly\");\n  const [savingsTimeframe, setSavingsTimeframe] = useState(\"weekly\");\n  const getUsersData = () => {\n    switch (usersTimeframe) {\n      case \"weekly\":\n        return weeklyData;\n      case \"monthly\":\n        return monthlyData;\n      case \"yearly\":\n        return yearlyData;\n    }\n  };\n  const getSavingsData = () => {\n    switch (savingsTimeframe) {\n      case \"weekly\":\n        return weeklyData;\n      case \"monthly\":\n        return monthlyData;\n      case \"yearly\":\n        return yearlyData;\n    }\n  };\n  const LineChart = ({\n    data,\n    dataKey,\n    color,\n    title\n  }) => {\n    const maxValue = Math.max(...data.map(d => d[dataKey]));\n    const points = data.map((item, index) => {\n      const x = index / (data.length - 1) * 100;\n      const y = 100 - item[dataKey] / maxValue * 80;\n      return `${x},${y}`;\n    }).join(' ');\n    return <div style={{\n      position: \"relative\",\n      height: \"300px\",\n      width: \"100%\"\n    }}>\n        <svg width=\"100%\" height=\"100%\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"none\">\n          {/* Grid lines */}\n          <defs>\n            <pattern id=\"grid\" width=\"20\" height=\"20\" patternUnits=\"userSpaceOnUse\">\n              <path d=\"M 20 0 L 0 0 0 20\" fill=\"none\" stroke=\"#f3f4f6\" strokeWidth=\"0.5\" />\n            </pattern>\n          </defs>\n          <rect width=\"100\" height=\"100\" fill=\"url(#grid)\" />\n          \n          {/* Line */}\n          <polyline fill=\"none\" stroke={color} strokeWidth=\"2\" points={points} />\n          \n          {/* Points */}\n          {data.map((item, index) => {\n          const x = index / (data.length - 1) * 100;\n          const y = 100 - item[dataKey] / maxValue * 80;\n          return <circle key={index} cx={x} cy={y} r=\"3\" fill={color} />;\n        })}\n        </svg>\n        \n        {/* Y-axis labels */}\n        <div style={{\n        position: \"absolute\",\n        left: \"-50px\",\n        top: \"0\",\n        height: \"100%\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        justifyContent: \"space-between\",\n        fontSize: \"12px\",\n        color: \"#6d7175\"\n      }}>\n          <span>{maxValue.toLocaleString()}</span>\n          <span>{Math.round(maxValue * 0.5).toLocaleString()}</span>\n          <span>0</span>\n        </div>\n        \n        {/* X-axis labels */}\n        <div style={{\n        position: \"absolute\",\n        bottom: \"-30px\",\n        left: \"0\",\n        width: \"100%\",\n        display: \"flex\",\n        justifyContent: \"space-between\",\n        fontSize: \"12px\",\n        color: \"#6d7175\"\n      }}>\n          {data.map((item, index) => <span key={index}>{item.period}</span>)}\n        </div>\n      </div>;\n  };\n  return <div style={{\n    maxWidth: \"1200px\"\n  }}>\n      {/* Page Header */}\n      <div style={{\n      marginBottom: \"32px\"\n    }}>\n        <h1 style={{\n        fontSize: \"28px\",\n        fontWeight: \"600\",\n        color: \"#202223\",\n        margin: \"0 0 8px 0\"\n      }}>\n          Analytics Dashboard\n        </h1>\n        <p style={{\n        fontSize: \"16px\",\n        color: \"#6d7175\",\n        margin: \"0\"\n      }}>\n          Track your suppression performance and ad spend savings over time\n        </p>\n      </div>\n\n      {/* Charts Grid */}\n      <div style={{\n      display: \"grid\",\n      gap: \"32px\"\n    }}>\n        {/* Users Added Chart */}\n        <div style={{\n        backgroundColor: \"#ffffff\",\n        borderRadius: \"12px\",\n        padding: \"24px\",\n        border: \"1px solid #e1e3e5\",\n        boxShadow: \"0 1px 3px rgba(0,0,0,0.05)\"\n      }}>\n          <div style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          marginBottom: \"24px\"\n        }}>\n            <div>\n              <h2 style={{\n              fontSize: \"18px\",\n              fontWeight: \"600\",\n              color: \"#202223\",\n              margin: \"0 0 4px 0\"\n            }}>\n                Users Added to Suppression\n              </h2>\n              <p style={{\n              fontSize: \"14px\",\n              color: \"#6d7175\",\n              margin: \"0\"\n            }}>\n                Number of customers suppressed from ads per {usersTimeframe.slice(0, -2)}\n              </p>\n            </div>\n            <div style={{\n            display: \"flex\",\n            gap: \"8px\"\n          }}>\n              {[\"weekly\", \"monthly\", \"yearly\"].map(timeframe => <button key={timeframe} onClick={() => setUsersTimeframe(timeframe)} style={{\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              border: \"1px solid #e1e3e5\",\n              backgroundColor: usersTimeframe === timeframe ? \"#6366f1\" : \"#ffffff\",\n              color: usersTimeframe === timeframe ? \"#ffffff\" : \"#374151\",\n              fontSize: \"14px\",\n              fontWeight: \"500\",\n              cursor: \"pointer\",\n              textTransform: \"capitalize\"\n            }}>\n                  {timeframe.slice(0, -2)}\n                </button>)}\n            </div>\n          </div>\n          \n          <div style={{\n          position: \"relative\",\n          paddingLeft: \"60px\",\n          paddingBottom: \"40px\"\n        }}>\n            <LineChart data={getUsersData()} dataKey=\"users\" color=\"#6366f1\" title=\"Users Suppressed\" />\n          </div>\n        </div>\n\n        {/* Money Saved Chart */}\n        <div style={{\n        backgroundColor: \"#ffffff\",\n        borderRadius: \"12px\",\n        padding: \"24px\",\n        border: \"1px solid #e1e3e5\",\n        boxShadow: \"0 1px 3px rgba(0,0,0,0.05)\"\n      }}>\n          <div style={{\n          display: \"flex\",\n          justifyContent: \"space-between\",\n          alignItems: \"center\",\n          marginBottom: \"24px\"\n        }}>\n            <div>\n              <h2 style={{\n              fontSize: \"18px\",\n              fontWeight: \"600\",\n              color: \"#202223\",\n              margin: \"0 0 4px 0\"\n            }}>\n                Estimated Money Saved\n              </h2>\n              <p style={{\n              fontSize: \"14px\",\n              color: \"#6d7175\",\n              margin: \"0\"\n            }}>\n                Ad spend saved by suppressing customers (estimated at $4 per customer)\n              </p>\n            </div>\n            <div style={{\n            display: \"flex\",\n            gap: \"8px\"\n          }}>\n              {[\"weekly\", \"monthly\", \"yearly\"].map(timeframe => <button key={timeframe} onClick={() => setSavingsTimeframe(timeframe)} style={{\n              padding: \"8px 16px\",\n              borderRadius: \"6px\",\n              border: \"1px solid #e1e3e5\",\n              backgroundColor: savingsTimeframe === timeframe ? \"#059669\" : \"#ffffff\",\n              color: savingsTimeframe === timeframe ? \"#ffffff\" : \"#374151\",\n              fontSize: \"14px\",\n              fontWeight: \"500\",\n              cursor: \"pointer\",\n              textTransform: \"capitalize\"\n            }}>\n                  {timeframe.slice(0, -2)}\n                </button>)}\n            </div>\n          </div>\n          \n          <div style={{\n          position: \"relative\",\n          paddingLeft: \"60px\",\n          paddingBottom: \"40px\"\n        }}>\n            <LineChart data={getSavingsData()} dataKey=\"savings\" color=\"#059669\" title=\"Money Saved\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Summary Stats */}\n      <div style={{\n      display: \"grid\",\n      gridTemplateColumns: \"repeat(auto-fit, minmax(200px, 1fr))\",\n      gap: \"16px\",\n      marginTop: \"32px\"\n    }}>\n        {[{\n        label: \"Total Users Suppressed\",\n        value: \"2,847\",\n        icon: \"\uD83D\uDC65\"\n      }, {\n        label: \"Total Savings\",\n        value: \"$11,388\",\n        icon: \"\uD83D\uDCB0\"\n      }, {\n        label: \"Average Daily Savings\",\n        value: \"$127\",\n        icon: \"\uD83D\uDCC8\"\n      }, {\n        label: \"Best Day\",\n        value: \"$284\",\n        icon: \"\uD83C\uDFC6\"\n      }].map((stat, index) => <div key={index} style={{\n        backgroundColor: \"#ffffff\",\n        borderRadius: \"8px\",\n        padding: \"20px\",\n        border: \"1px solid #e1e3e5\",\n        textAlign: \"center\"\n      }}>\n            <div style={{\n          fontSize: \"24px\",\n          marginBottom: \"8px\"\n        }}>{stat.icon}</div>\n            <div style={{\n          fontSize: \"24px\",\n          fontWeight: \"700\",\n          color: \"#202223\",\n          marginBottom: \"4px\"\n        }}>\n              {stat.value}\n            </div>\n            <div style={{\n          fontSize: \"13px\",\n          color: \"#6d7175\"\n        }}>{stat.label}</div>\n          </div>)}\n      </div>\n    </div>;\n}\n_s(Analytics, \"22lVhL4dFRucOjD9Q9DxiM9trW8=\", false, function () {\n  return [useLoaderData];\n});\n_c = Analytics;\nvar _c;\n$RefreshReg$(_c, \"Analytics\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": ["import_react"]
}
